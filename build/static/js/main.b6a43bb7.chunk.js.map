{"version":3,"sources":["Interfaces.ts","Utils.ts","VMenue.tsx","Cards.tsx","Classes/Tasks/CDefaultTask.ts","Classes/Lists/CDefaultTaskList.ts","Classes/Webservices/CLocalStorage.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["eSaveType","applyDrag","arr","dragResult","removedIndex","addedIndex","payload","result","itemToAdd","splice","cardmenue","icon","DeleteForever","text","enabled","action","oCard","fDelete","StyledMenu","styled","props","Menu","elevation","anchorOrigin","vertical","horizontal","transformOrigin","theme","borderRadius","marginTop","spacing","minWidth","color","palette","mode","grey","boxShadow","padding","fontSize","secondary","marginRight","backgroundColor","alpha","primary","main","selectedOpacity","VMenue","p_oProps","React","anchorEl","setAnchorEl","open","Boolean","handleClose","className","IconButton","aria-label","id","aria-controls","aria-expanded","undefined","aria-haspopup","onClick","event","currentTarget","MenuListProps","onClose","PaperProps","style","map","MenuItem","taskcard","callback","disableRipple","disabled","children","Cards","p_oPros","onColumnDrop","bind","onCardDrop","getCardPayload","state","scene","type","orientation","oWebservice","fGetLists","window","p_oState","p_fCallback","this","setState","saveType","Complete","fSave","onDrop","dropPlaceholder","animationDuration","showOnTop","column","Card","length","sx","bgcolor","TextField","fullWidth","variant","value","name","onChange","p_Event","Object","assign","target","fSetState","groupName","e","getChildPayload","index","dragClass","dropClass","dropPlaceholderAnimationDuration","card","maxWidth","CardHeader","updateGUI","title","multiline","data","subheader","Button","startIcon","Add","oTask","fAddTask","document","querySelector","focus","columnId","filter","p","dropResult","console","log","draggedTask","oParent","parent","Component","CTask","p_nId","p_nParent","p_sType","p_sData","p_oLabels","_type","_parent","_id","_props","_data","_labels","indexOf","CTaskList","p_sName","p_dctChildren","_name","_children","p_oTask","Math","random","toString","substring","background","push","pElement","CLocalStorage","p_SaveType","_saveType","p_nUserID","oReturn","oData","localStorage","getItem","parse","forEach","ContainerElem","oTaskList","ChildElem","fGetTasks","p_nListID","p_oData","setItem","stringify","ColorModeContext","toggleColorMode","ToggleColorMode","setMode","colorMode","prevMode","createTheme","blue","neutral","contrastText","pink","Provider","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","getElementById"],"mappings":"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","file":"static/js/main.b6a43bb7.chunk.js","sourcesContent":["import { CSSProperties } from \"react\";\r\n\r\nexport interface IWebservice {\r\n\r\n    fGetLists(p_nUserID?: string): any;\r\n    fGetTasks(p_nListID: any): any;\r\n    fSave(p_oData: any): any;\r\n    saveType: eSaveType;\r\n}\r\n\r\nexport interface ITasksContainer {\r\n    id: string,\r\n    type: string,\r\n    name: string,\r\n    props: {\r\n        orientation: string,\r\n        className: string\r\n    },\r\n    children?: Array<ITasks>,\r\n    fAddTask: Function,\r\n    fRemoveTask: Function\r\n}\r\n\r\nexport interface ITasks {\r\n    id: string,\r\n    parent: ITasksContainer,\r\n    type: string,\r\n    props: {\r\n        className: string,\r\n        style: CSSProperties\r\n    },\r\n    data: string,\r\n    labels: Array<ITaskLabel>,\r\n    fDelete: Function\r\n}\r\nexport interface ITaskListProps {\r\n    orientation: string,\r\n    className: string\r\n}\r\n\r\nexport enum eSaveType {\r\n    Single,\r\n    Complete\r\n}\r\n\r\nexport interface ITaskLabel {\r\n    id: string,\r\n    text: string,\r\n    color: string\r\n}","export const applyDrag = (arr: any, dragResult: any) => {\r\n\r\n    // console.log(\"applyDrag\", arr, dragResult);\r\n\r\n    const { removedIndex, addedIndex, payload } = dragResult;\r\n    if (removedIndex === null && addedIndex === null) return arr;\r\n\r\n    const result = [...arr];\r\n    let itemToAdd = payload;\r\n\r\n    if (removedIndex !== null) {\r\n        itemToAdd = result.splice(removedIndex, 1)[0];\r\n    }\r\n\r\n    if (addedIndex !== null) {\r\n        result.splice(addedIndex, 0, itemToAdd);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const generateItems = (count: any, creator: any): any => {\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n        result.push(creator(i));\r\n    }\r\n    return result;\r\n};","import * as React from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Menu, { MenuProps } from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport { Alarm, DeleteForever, DriveFileMove, FileCopy, LocalOffer, OpenInFull, Person } from '@mui/icons-material';\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { ITasks } from './Interfaces';\r\n\r\nconst cardmenue = [\r\n    // {\r\n    //     icon: <OpenInFull />,\r\n    //     text: 'Karte öffnen'\r\n    // },\r\n    // {\r\n    //     icon: <LocalOffer />,\r\n    //     text: 'Labels bearbeiten'\r\n    // },\r\n    // {\r\n    //     icon: <Person />,\r\n    //     text: 'Mitglieder ändern'\r\n    // },\r\n    // {\r\n    //     icon: <Alarm />,\r\n    //     text: 'Daten bearbeiten'\r\n    // },\r\n    // {\r\n    //     icon: <DriveFileMove />,\r\n    //     text: 'Verschieben'\r\n    // },\r\n    // {\r\n    //     icon: <FileCopy />,\r\n    //     text: 'Kopieren'\r\n    // },\r\n    {\r\n        icon: <DeleteForever />,\r\n        text: 'Löschen',\r\n        enabled: true,\r\n        action: function (oCard: ITasks) {\r\n\r\n            oCard.fDelete();\r\n        }\r\n    }\r\n];\r\n\r\nconst StyledMenu = styled((props: MenuProps) => (\r\n    <Menu\r\n        elevation={0}\r\n        anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'left',\r\n        }}\r\n        {...props}\r\n    />\r\n))(({ theme }) => ({\r\n    '& .MuiPaper-root': {\r\n        borderRadius: 6,\r\n        marginTop: theme.spacing(1),\r\n        minWidth: 180,\r\n        color:\r\n            theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],\r\n        boxShadow:\r\n            'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\r\n        '& .MuiMenu-list': {\r\n            padding: '4px 0',\r\n        },\r\n        '& .MuiMenuItem-root': {\r\n            '& .MuiSvgIcon-root': {\r\n                fontSize: 18,\r\n                color: theme.palette.text.secondary,\r\n                marginRight: theme.spacing(1.5),\r\n            },\r\n            '&:active': {\r\n                backgroundColor: alpha(\r\n                    theme.palette.primary.main,\r\n                    theme.palette.action.selectedOpacity,\r\n                ),\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\ninterface MyProps {\r\n    taskcard: ITasks,\r\n    callback: Function\r\n}\r\n\r\n\r\nexport default function VMenue(p_oProps: React.PropsWithChildren<MyProps>): JSX.Element {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"vmenu\">\r\n            <IconButton\r\n                aria-label=\"more\"\r\n                id=\"long-button\"\r\n                aria-controls=\"long-menu\"\r\n                aria-expanded={open ? 'true' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n            <StyledMenu\r\n                id=\"long-menu\"\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'long-button',\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    style: {\r\n\r\n                    },\r\n                }}\r\n            >\r\n                {cardmenue.map((cardmenue) => (\r\n                    <MenuItem key={cardmenue.text} onClick={function () {\r\n\r\n                        if (cardmenue.action) {\r\n\r\n                            cardmenue.action(p_oProps.taskcard);\r\n                            p_oProps.callback();\r\n                        }\r\n                        handleClose();\r\n                    }} disableRipple disabled={!cardmenue.enabled ?? false}>\r\n                        {cardmenue.icon}\r\n                        {cardmenue.text}\r\n                    </MenuItem>\r\n                ))}\r\n                {p_oProps.children}\r\n            </StyledMenu>\r\n        </div>\r\n    );\r\n}","import { Avatar, AvatarGroup, Button, Card, CardActions, CardContent, CardHeader, CardMedia, Chip, Collapse, IconButton, MenuItem, Paper, TextField, Typography } from \"@mui/material\";\r\nimport React, { Component } from \"react\";\r\nimport { Container, Draggable } from \"react-smooth-dnd\";\r\nimport { IWebservice, ITasksContainer, eSaveType } from \"./Interfaces\";\r\nimport { applyDrag, generateItems } from \"./Utils\";\r\nimport { Add, TagFaces, ConstructionOutlined, Alarm, DeleteForever, DriveFileMove, FileCopy, LocalOffer, OpenInFull, Person, ExpandMore, Favorite, MoreVert, Share } from '@mui/icons-material';\r\nimport VMenue from \"./VMenue\";\r\nimport { red } from \"@mui/material/colors\";\r\n\r\nexport interface Props {\r\n    oWebservice?: IWebservice\r\n}\r\nexport interface State {\r\n    scene: {\r\n        type: string,\r\n        props: {\r\n            orientation: string\r\n        },\r\n        children: any\r\n    }\r\n}\r\n\r\nclass Cards extends React.Component<Props, State> {\r\n    constructor(p_oPros: Props) {\r\n\r\n        super(p_oPros);\r\n\r\n        this.onColumnDrop = this.onColumnDrop.bind(this);\r\n        this.onCardDrop = this.onCardDrop.bind(this);\r\n        this.getCardPayload = this.getCardPayload.bind(this);\r\n\r\n        // const oModel: Array<ITasksContainer> = p_oPros.oWebservice?.fGetLists();\r\n\r\n\r\n\r\n        this.state = {\r\n            scene: {\r\n                type: \"container\",\r\n                props: {\r\n                    orientation: \"horizontal\"\r\n                },\r\n                children: p_oPros.oWebservice?.fGetLists()\r\n            }\r\n        };\r\n        //@ts-ignore\r\n        window[\"scene\"] = this.state;\r\n    }\r\n\r\n    public fSetState(p_oState: any, p_fCallback: any = () => { }) {\r\n\r\n        this.setState(p_oState, p_fCallback);\r\n        if (this.props.oWebservice?.saveType === eSaveType.Complete) {\r\n\r\n            this.props.oWebservice.fSave(this.state.scene.children);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card-scene\">\r\n                <Container\r\n                    orientation=\"horizontal\"\r\n                    onDrop={this.onColumnDrop}\r\n                    dropPlaceholder={{\r\n                        animationDuration: 150,\r\n                        showOnTop: true,\r\n                        className: 'cards-drop-preview'\r\n                    }}\r\n                >\r\n                    {this.state.scene.children.map((column: any): any => {\r\n                        return (\r\n                            <Draggable key={column.id}>\r\n                                <Card className={column.props.className + (column.children.length == 0 ? \" emptycontainer\" : \"\")} sx={{\r\n                                    bgcolor: \"neutral.main\",\r\n                                }}>\r\n                                    <div className=\"card-column-header\">\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            value={column.name}\r\n                                            className=\"noUnderlineInput\"\r\n                                            onChange={(p_Event) => {\r\n\r\n                                                const scene = Object.assign({}, this.state.scene);\r\n                                                column.name = p_Event.target.value\r\n                                                this.fSetState({ scene });\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <Container\r\n                                        {...column.props}\r\n                                        groupName=\"col\"\r\n                                        // onDragStart={e => console.log(\"drag started\", e)}\r\n                                        // onDragEnd={e => console.log(\"drag end\", e)}\r\n                                        onDrop={e => this.onCardDrop(column.id, e)}\r\n                                        getChildPayload={index =>\r\n                                            this.getCardPayload(column.id, index)\r\n                                        }\r\n                                        dragClass=\"card-ghost\"\r\n                                        dropClass=\"card-ghost-drop\"\r\n                                        // onDragEnter={() => {\r\n                                        //     console.log(\"drag enter:\", column.id);\r\n                                        // }}\r\n                                        // onDragLeave={() => {\r\n                                        //     console.log(\"drag leave:\", column.id);\r\n                                        // }}\r\n                                        // onDropReady={p => console.log('Drop ready: ', p)}\r\n                                        dropPlaceholder={{\r\n                                            animationDuration: 150,\r\n                                            showOnTop: true,\r\n                                            className: 'drop-preview'\r\n                                        }}\r\n                                        dropPlaceholderAnimationDuration={200}\r\n                                    >\r\n                                        {column.children.map((card: any): any => {\r\n                                            return (\r\n                                                <Draggable key={card.id}>\r\n                                                    <Card id={\"t\" + card.id} {...card.props} sx={{ maxWidth: 345 }}>\r\n                                                        <CardHeader\r\n                                                            action={\r\n                                                                <VMenue taskcard={card} callback={this.updateGUI.bind(this)} />\r\n                                                            }\r\n                                                            title={\r\n                                                                <TextField\r\n                                                                    multiline\r\n                                                                    fullWidth\r\n                                                                    variant=\"standard\"\r\n                                                                    value={card.data}\r\n                                                                    className={\"noUnderlineInput cardtitle\"}\r\n                                                                    onChange={(p_Event) => {\r\n\r\n                                                                        const scene = Object.assign({}, this.state.scene);\r\n                                                                        card.data = p_Event.target.value\r\n                                                                        this.fSetState({ scene });\r\n                                                                    }}\r\n                                                                />\r\n                                                            }\r\n                                                            subheader=\"September 14, 2016\"\r\n                                                        />\r\n                                                        {/* <CardMedia\r\n                                                            sx={{\r\n                                                                pointerEvents: \"none\"\r\n                                                            }}\r\n                                                            component=\"img\"\r\n                                                            height=\"150\"\r\n                                                            image=\"https://placekitten.com/300/150\"\r\n                                                            alt=\"Paella dish\"\r\n                                                        /> */}\r\n                                                        {/* <CardContent>\r\n                                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                                This impressive paella is a perfect party dish and a fun meal to cook\r\n                                                                together with your guests. Add 1 cup of frozen peas along with the mussels,\r\n                                                                if you like.\r\n                                                            </Typography>\r\n                                                        </CardContent> */}\r\n                                                        {/* <CardActions disableSpacing>\r\n                                                            <AvatarGroup max={4}>\r\n                                                                <Avatar alt=\"Remy Sharp\"></Avatar>\r\n                                                                <Avatar alt=\"Travis Howard\"></Avatar>\r\n                                                                <Avatar alt=\"Cindy Baker\"></Avatar>\r\n                                                                <Avatar alt=\"Agnes Walker\"></Avatar>\r\n                                                                <Avatar alt=\"Trevor Henderson\"></Avatar>\r\n                                                            </AvatarGroup>\r\n                                                            <IconButton style={{ marginLeft: \"auto\" }} aria-label=\"add to favorites\">\r\n                                                                <Favorite />\r\n                                                            </IconButton>\r\n                                                            <IconButton aria-label=\"share\">\r\n                                                                <Share />\r\n                                                            </IconButton>\r\n                                                        </CardActions> */}\r\n                                                    </Card>\r\n                                                </Draggable>\r\n                                            );\r\n                                        })}\r\n                                    </Container>\r\n                                    <div className=\"ContainerFooter\">\r\n                                        <Button startIcon={<Add />} onClick={() => {\r\n\r\n                                            const scene = Object.assign({}, this.state.scene);\r\n                                            var oTask = column.fAddTask();\r\n                                            this.fSetState({ scene }, function () {\r\n\r\n                                                let oElem: any = document.querySelector(\"#t\" + oTask.id + \" textarea\");\r\n                                                oElem.focus();\r\n                                            });\r\n                                        }} >\r\n                                            Neue Karte\r\n                                        </Button>\r\n                                    </div>\r\n                                </Card>\r\n                            </Draggable>\r\n                        );\r\n                    })}\r\n                </Container>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    getCardPayload(columnId: any, index: any) {\r\n        return this.state.scene.children.filter((p: any): any => p.id === columnId)[0].children[\r\n            index\r\n        ];\r\n    }\r\n\r\n    onColumnDrop(dropResult: any) {\r\n        const scene = Object.assign({}, this.state.scene);\r\n        scene.children = applyDrag(scene.children, dropResult);\r\n        this.fSetState({ scene });\r\n    }\r\n\r\n    onCardDrop(columnId: any, dropResult: any) {\r\n        console.log(\"onCardDrop\", columnId, dropResult);\r\n        const scene = Object.assign({}, this.state.scene);\r\n        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\r\n\r\n            const draggedTask = dropResult.payload;\r\n            const oParent: ITasksContainer = scene.children.filter((p: any): any => p.id === columnId)[0];\r\n\r\n            if (dropResult.addedIndex !== null) {\r\n\r\n                draggedTask.parent = oParent;\r\n            }\r\n            oParent.children = applyDrag(oParent.children, dropResult);\r\n\r\n        }\r\n        this.fSetState({ scene });\r\n    }\r\n\r\n    updateGUI() {\r\n\r\n        const scene = Object.assign({}, this.state.scene);\r\n        this.fSetState({ scene });\r\n    }\r\n}\r\n\r\nexport default Cards;","import { CSSProperties } from \"react\";\r\nimport { ITaskLabel, ITasks, ITasksContainer } from \"../../Interfaces\";\r\n\r\ninterface ITaskProps {\r\n    className: string,\r\n    style: CSSProperties\r\n}\r\n\r\nexport default class CTask implements ITasks {\r\n\r\n    constructor(p_nId: string, p_nParent: ITasksContainer, p_sType: string, p_oProps: ITaskProps, p_sData: string, p_oLabels?: Array<ITaskLabel>) {\r\n\r\n        this._type = p_sType;\r\n        this._id = p_nId;\r\n        this._props = p_oProps;\r\n        this._data = p_sData;\r\n        this._parent = p_nParent;\r\n        this._labels = p_oLabels ?? [];\r\n    }\r\n\r\n    private _type: string;\r\n    private _parent: ITasksContainer;\r\n    private _id: string;\r\n    private _props: {\r\n        className: string,\r\n        style: CSSProperties\r\n    };\r\n    private _data: string;\r\n    private _labels: Array<ITaskLabel>\r\n\r\n\r\n    /**\r\n     * Getter type\r\n     * @return {string}\r\n     */\r\n    public get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Getter id\r\n     * @return {string}\r\n     */\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * Getter props\r\n     * @return {string}\r\n     */\r\n    public get props(): ITaskProps {\r\n        return this._props;\r\n    }\r\n\r\n    /**\r\n     * Getter data\r\n     * @return {string}\r\n     */\r\n    public get data(): string {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n * Getter data\r\n * @return {Array<ITaskLabel>}\r\n */\r\n    public get labels(): Array<ITaskLabel> {\r\n        return this._labels;\r\n    }\r\n\r\n    /**\r\n     * Getter children\r\n     * @return {string}\r\n     */\r\n    public get parent(): ITasksContainer {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * Setter type\r\n     * @param {string} value\r\n     */\r\n    public set type(value: string) {\r\n        this._type = value;\r\n    }\r\n\r\n    /**\r\n     * Setter id\r\n     * @param {string} value\r\n     */\r\n    public set id(value: string) {\r\n        this._id = value;\r\n    }\r\n\r\n    /**\r\n     * Setter data\r\n     * @param {string} value\r\n     */\r\n    public set data(value: string) {\r\n        this._data = value;\r\n    }\r\n\r\n    /**\r\n     * Setter props\r\n     * @param {string} value\r\n     */\r\n    public set props(value: ITaskProps) {\r\n        this._props = value;\r\n    }\r\n\r\n    public set parent(value: ITasksContainer) {\r\n        this._parent = value;\r\n    }\r\n\r\n    public set labels(value: Array<ITaskLabel>) {\r\n        this._labels = value;\r\n    }\r\n\r\n    public fDelete(): void {\r\n\r\n        const index: number = this.parent.children?.indexOf(this, 0) ?? -1;\r\n        if (index > -1 && this.parent.children) {\r\n\r\n            this.parent.children.splice(index, 1);\r\n        }\r\n    }\r\n}","import { ITaskListProps, ITasks } from \"../../Interfaces\";\r\nimport CTask from \"../Tasks/CDefaultTask\";\r\nexport default class CTaskList {\r\n\r\n    private _id: string;\r\n    private _type: string;\r\n    private _name: string;\r\n    private _props: ITaskListProps;\r\n    private _children: Array<ITasks>;\r\n\r\n\r\n    constructor(p_nId: string, p_sType: string, p_sName: string, p_oProps: ITaskListProps, p_dctChildren?: Array<ITasks>) {\r\n        this._id = p_nId;\r\n        this._type = p_sType;\r\n        this._name = p_sName;\r\n        this._props = p_oProps;\r\n        this._children = p_dctChildren ?? [];\r\n    }\r\n\r\n    /**\r\n     * Getter id\r\n     * @return {string}\r\n     */\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * Getter type\r\n     * @return {string}\r\n     */\r\n    public get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Getter name\r\n     * @return {string}\r\n     */\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Getter props\r\n     * @return {ITaskListProps}\r\n     */\r\n    public get props(): ITaskListProps {\r\n        return this._props;\r\n    }\r\n\r\n    /**\r\n     * Getter children\r\n     * @return {Array<ITasks>}\r\n     */\r\n    public get children(): Array<ITasks> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Setter id\r\n     * @param {string} value\r\n     */\r\n    public set id(value: string) {\r\n        this._id = value;\r\n    }\r\n\r\n    /**\r\n     * Setter type\r\n     * @param {string} value\r\n     */\r\n    public set type(value: string) {\r\n        this._type = value;\r\n    }\r\n\r\n    /**\r\n     * Setter name\r\n     * @param {string} value\r\n     */\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    /**\r\n     * Setter props\r\n     * @param {ITaskListProps} value\r\n     */\r\n    public set props(value: ITaskListProps) {\r\n        this._props = value;\r\n    }\r\n\r\n    /**\r\n     * Setter children\r\n     * @param {Array<ITasks>} value\r\n     */\r\n    public set children(value: Array<ITasks>) {\r\n        this._children = value;\r\n    }\r\n\r\n    public fAddTask(p_oTask?: ITasks): ITasks {\r\n\r\n        let oTask: ITasks;\r\n        if (p_oTask) {\r\n\r\n            oTask = p_oTask;\r\n            p_oTask.parent = this;\r\n        } else {\r\n\r\n            oTask = new CTask((Math.random() + 1).toString(36).substring(7), this, \"draggable\", { className: \"card\", style: { background: \"white\" } }, \"\");\r\n        }\r\n        this.children.push(oTask);\r\n\r\n        return oTask;\r\n    }\r\n\r\n    public fRemoveTask(p_oTask: ITasks) {\r\n\r\n        this.children = this.children.filter(function (pElement) {\r\n            return pElement !== p_oTask;\r\n        });\r\n    }\r\n}","import { IWebservice, ITasksContainer, eSaveType } from \"../../Interfaces\";\r\nimport CTaskList from \"../Lists/CDefaultTaskList\";\r\nimport CTask from \"../Tasks/CDefaultTask\";\r\nimport { parse, stringify, toJSON, fromJSON } from 'flatted';\r\n\r\n\r\nexport default class CLocalStorage implements IWebservice {\r\n\r\n    private _saveType: eSaveType;\r\n\r\n    constructor(p_SaveType: eSaveType) {\r\n\r\n        this._saveType = p_SaveType;\r\n    }\r\n\r\n    public get saveType(): eSaveType {\r\n\r\n        return this._saveType;\r\n    }\r\n\r\n    fGetLists(p_nUserID?: string): any {\r\n\r\n        let oReturn: any = [];\r\n        var oData: any = window.localStorage?.getItem(\"planner\");\r\n        try {\r\n            oData = parse(oData);\r\n            oData.forEach((ContainerElem: any) => {\r\n\r\n                var oTaskList = new CTaskList(ContainerElem._id, ContainerElem._type, ContainerElem._name, ContainerElem._props, []);\r\n                var arrChildren: any = [];\r\n                ContainerElem._children.forEach((ChildElem: any) => {\r\n\r\n                    oTaskList.fAddTask(new CTask(ChildElem._id, ChildElem.oTaskList, ChildElem._type, ChildElem._props, ChildElem._data));\r\n                });\r\n                oReturn.push(oTaskList);\r\n            });\r\n        }\r\n        finally {\r\n\r\n            if (oReturn.length === 0) {\r\n\r\n                oReturn = [\r\n                    new CTaskList(\"0\", \"Container\", \"Purpose\", { orientation: \"vertical\", className: \"card-container\" }, this.fGetTasks(\"0\")),\r\n                    new CTaskList(\"1\", \"Container\", \"Backlog\", { orientation: \"vertical\", className: \"card-container\" }, this.fGetTasks(\"1\")),\r\n                    new CTaskList(\"2\", \"Container\", \"Sprint\", { orientation: \"vertical\", className: \"card-container\" }, this.fGetTasks(\"2\")),\r\n                    new CTaskList(\"3\", \"Container\", \"Active\", { orientation: \"vertical\", className: \"card-container\" }, this.fGetTasks(\"3\")),\r\n                    new CTaskList(\"4\", \"Container\", \"Done\", { orientation: \"vertical\", className: \"card-container\" }, this.fGetTasks(\"4\")),\r\n                ];\r\n            }\r\n            return oReturn;\r\n        }\r\n    };\r\n    fGetTasks(p_nListID: string): any {\r\n\r\n    };\r\n    fSave(p_oData: any): any {\r\n\r\n        window.localStorage?.setItem(\"planner\", stringify(p_oData));\r\n    }\r\n}","import * as React from 'react';\r\nimport './App.css';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Box from '@mui/material/Box';\r\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\r\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\r\nimport Cards from './Cards';\r\nimport CLocalStorage from './Classes/Webservices/CLocalStorage';\r\nimport { eSaveType, IWebservice } from './Interfaces';\r\nimport { amber, deepOrange, grey, blue, pink } from '@mui/material/colors';\r\n\r\nconst oWebservice: IWebservice = new CLocalStorage(eSaveType.Complete);\r\nconst ColorModeContext = React.createContext({ toggleColorMode: () => { } });\r\n\r\nfunction MyApp() {\r\n    const theme = useTheme();\r\n    const colorMode = React.useContext(ColorModeContext);\r\n    return (\r\n        <Box>\r\n            <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\r\n                {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default function ToggleColorMode() {\r\n    const [mode, setMode] = React.useState<'light' | 'dark'>('light');\r\n    const colorMode = React.useMemo(\r\n        () => ({\r\n            toggleColorMode: () => {\r\n                setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n            },\r\n        }),\r\n        [],\r\n    );\r\n\r\n    // TODO: Create Themes\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    mode,\r\n                    ...(mode === 'light'\r\n                        ? {\r\n                            // palette values for light mode\r\n                            primary: blue,\r\n                            neutral: {\r\n                                main: '#f3f3f3',\r\n                                contrastText: '#fff'\r\n                            }\r\n                        }\r\n                        : {\r\n                            // palette values for dark mode\r\n                            primary: pink,\r\n                            neutral: {\r\n                                main: '#1a1a1a',\r\n                                contrastText: '#fff'\r\n                            }\r\n                        }),\r\n                },\r\n            }),\r\n        [mode],\r\n    );\r\n\r\n    return (\r\n        <ColorModeContext.Provider value={colorMode}>\r\n            <ThemeProvider theme={theme}>\r\n                {/* <MyApp /> */}\r\n                <Cards oWebservice={oWebservice} />\r\n            </ThemeProvider>\r\n        </ColorModeContext.Provider>\r\n    );\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { StyledEngineProvider } from '@mui/material/styles';\r\n\r\ndeclare module '@mui/material/styles' {\r\n    interface Palette {\r\n      neutral: Palette['primary'];\r\n    }\r\n  \r\n    // allow configuration using `createTheme`\r\n    interface PaletteOptions {\r\n      neutral?: PaletteOptions['primary'];\r\n    }\r\n  }\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <StyledEngineProvider injectFirst>\r\n            <App />\r\n        </StyledEngineProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}